{"version":3,"file":"react-sizeme.min.js","sources":["../src/resize-detector.js","../src/with-size.js","../src/component.js","../src/index.js"],"sourcesContent":["import createResizeDetector from 'element-resize-detector'\r\n\r\nconst instances = {}\r\n\r\n// Lazily require to not cause bug\r\n// https://github.com/ctrlplusb/react-sizeme/issues/6\r\nfunction resizeDetector(strategy = 'scroll') {\r\n  /*if (!instances[strategy]) {\r\n    instances[strategy] = createResizeDetector({\r\n      strategy,\r\n    })\r\n  }\r\n\r\n  return instances[strategy]*/\r\n  \r\n  return createResizeDetector({\r\n    strategy,\r\n  })\r\n}\r\n\r\nexport default resizeDetector\r\n","/* eslint-disable react/no-multi-comp */\r\n/* eslint-disable react/require-default-props */\r\n\r\nimport React, { Children, Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ReactDOM from 'react-dom'\r\nimport invariant from 'invariant'\r\nimport throttle from 'lodash.throttle'\r\nimport debounce from 'lodash.debounce'\r\nimport resizeDetector from './resize-detector'\r\n\r\nconst defaultConfig = {\r\n  monitorWidth: true,\r\n  monitorHeight: false,\r\n  monitorPosition: false,\r\n  refreshRate: 16,\r\n  refreshMode: 'throttle',\r\n  noPlaceholder: false,\r\n  resizeDetectorStrategy: 'scroll',\r\n}\r\n\r\nfunction getDisplayName(WrappedComponent) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component'\r\n}\r\n\r\n/**\r\n * This is a utility wrapper component that will allow our higher order\r\n * component to get a ref handle on our wrapped components html.\r\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\r\n */\r\nclass ReferenceWrapper extends Component {\r\n  static displayName = 'SizeMeReferenceWrapper'\r\n\r\n  render() {\r\n    return Children.only(this.props.children)\r\n  }\r\n}\r\nReferenceWrapper.propTypes = { children: PropTypes.element.isRequired }\r\n\r\nfunction Placeholder({ className, style }) {\r\n  // Lets create the props for the temp element.\r\n  const phProps = {}\r\n\r\n  // We will use any provided className/style or else make the temp\r\n  // container take the full available space.\r\n  if (!className && !style) {\r\n    phProps.style = { width: '100%', height: '100%' }\r\n  } else {\r\n    if (className) {\r\n      phProps.className = className\r\n    }\r\n    if (style) {\r\n      phProps.style = style\r\n    }\r\n  }\r\n\r\n  return <div {...phProps} />\r\n}\r\nPlaceholder.displayName = 'SizeMePlaceholder'\r\nPlaceholder.propTypes = {\r\n  className: PropTypes.string,\r\n  style: PropTypes.object,\r\n}\r\n\r\n/**\r\n * As we need to maintain a ref on the root node that is rendered within our\r\n * SizeMe component we need to wrap our entire render in a sub component.\r\n * Without this, we lose the DOM ref after the placeholder is removed from\r\n * the render and the actual component is rendered.\r\n * It took me forever to figure this out, so tread extra careful on this one!\r\n */\r\nconst renderWrapper = WrappedComponent => {\r\n  function SizeMeRenderer(props) {\r\n    const {\r\n      explicitRef,\r\n      className,\r\n      style,\r\n      size,\r\n      disablePlaceholder,\r\n      onSize,\r\n      ...restProps\r\n    } = props\r\n\r\n    const noSizeData =\r\n      size == null ||\r\n      (size.width == null && size.height == null && size.position == null)\r\n\r\n    const renderPlaceholder = noSizeData && !disablePlaceholder\r\n\r\n    const renderProps = {\r\n      className,\r\n      style,\r\n    }\r\n\r\n    if (size != null) {\r\n      renderProps.size = size\r\n    }\r\n\r\n    const toRender = renderPlaceholder ? (\r\n      <Placeholder className={className} style={style} />\r\n    ) : (\r\n      <WrappedComponent {...renderProps} {...restProps} />\r\n    )\r\n\r\n    return <ReferenceWrapper ref={explicitRef}>{toRender}</ReferenceWrapper>\r\n  }\r\n\r\n  SizeMeRenderer.displayName = `SizeMeRenderer(${getDisplayName(\r\n    WrappedComponent,\r\n  )})`\r\n\r\n  SizeMeRenderer.propTypes = {\r\n    explicitRef: PropTypes.func.isRequired,\r\n    className: PropTypes.string,\r\n    style: PropTypes.object, // eslint-disable-line react/forbid-prop-types\r\n    size: PropTypes.shape({\r\n      width: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\r\n      height: PropTypes.number, // eslint-disable-line react/no-unused-prop-types\r\n    }),\r\n    disablePlaceholder: PropTypes.bool,\r\n    onSize: PropTypes.func,\r\n  }\r\n\r\n  return SizeMeRenderer\r\n}\r\n\r\n/**\r\n * :: config -> Component -> WrappedComponent\r\n *\r\n * Higher order component that allows the wrapped component to become aware\r\n * of it's size, by receiving it as an object within it's props.\r\n *\r\n * @param  monitorWidth\r\n *   Default true, whether changes in the element's width should be monitored,\r\n *   causing a size property to be broadcast.\r\n * @param  monitorHeight\r\n *   Default false, whether changes in the element's height should be monitored,\r\n *   causing a size property to be broadcast.\r\n *\r\n * @return The wrapped component.\r\n */\r\nfunction withSize(config = defaultConfig) {\r\n  const {\r\n    monitorWidth = defaultConfig.monitorWidth,\r\n    monitorHeight = defaultConfig.monitorHeight,\r\n    monitorPosition = defaultConfig.monitorPosition,\r\n    refreshRate = defaultConfig.refreshRate,\r\n    refreshMode = defaultConfig.refreshMode,\r\n    noPlaceholder = defaultConfig.noPlaceholder,\r\n    resizeDetectorStrategy = defaultConfig.resizeDetectorStrategy,\r\n  } = config\r\n\r\n  invariant(\r\n    monitorWidth || monitorHeight || monitorPosition,\r\n    'You have to monitor at least one of the width, height, or position when using \"sizeMe\"',\r\n  )\r\n\r\n  invariant(\r\n    refreshRate >= 16,\r\n    \"It is highly recommended that you don't put your refreshRate lower than \" +\r\n      '16 as this may cause layout thrashing.',\r\n  )\r\n\r\n  invariant(\r\n    refreshMode === 'throttle' || refreshMode === 'debounce',\r\n    'The refreshMode should have a value of \"throttle\" or \"debounce\"',\r\n  )\r\n\r\n  const refreshDelayStrategy = refreshMode === 'throttle' ? throttle : debounce\r\n\r\n  return function WrapComponent(WrappedComponent) {\r\n    const SizeMeRenderWrapper = renderWrapper(WrappedComponent)\r\n\r\n    class SizeAwareComponent extends React.Component {\r\n      static displayName = `SizeMe(${getDisplayName(WrappedComponent)})`\r\n\r\n      static propTypes = {\r\n        onSize: PropTypes.func,\r\n      }\r\n\r\n      state = {\r\n        width: undefined,\r\n        height: undefined,\r\n        position: undefined,\r\n      }\r\n\r\n      componentDidMount() {\r\n        this.detector = resizeDetector(resizeDetectorStrategy)\r\n        this.determineStrategy(this.props)\r\n        this.handleDOMNode(true)\r\n      }\r\n\r\n      componentDidUpdate() {\r\n        /**\r\n         * Change component will mount to componentDidUpdate\r\n         * Based on https://github.com/reactjs/reactjs.org/issues/721\r\n         */\r\n        this.determineStrategy(this.props)\r\n        this.handleDOMNode()\r\n      }\r\n\r\n      componentWillUnmount() {\r\n        // Change our size checker to a noop just in case we have some\r\n        // late running events.\r\n        this.hasSizeChanged = () => undefined\r\n        this.checkIfSizeChanged = () => undefined\r\n\r\n        if (this.domEl) {\r\n          this.detector.uninstall(this.domEl)\r\n          this.domEl = null\r\n        }\r\n      }\r\n\r\n      determineStrategy = props => {\r\n        if (props.onSize) {\r\n          if (!this.callbackState) {\r\n            this.callbackState = {\r\n              ...this.state,\r\n            }\r\n          }\r\n          this.strategy = 'callback'\r\n        } else {\r\n          this.strategy = 'render'\r\n        }\r\n      }\r\n\r\n      strategisedSetState = state => {\r\n        if (this.strategy === 'callback') {\r\n          this.callbackState = state\r\n          this.props.onSize(state)\r\n        }\r\n        this.setState(state)\r\n      }\r\n\r\n      strategisedGetState = () =>\r\n        this.strategy === 'callback' ? this.callbackState : this.state\r\n\r\n      handleDOMNode(first) {\r\n        const found = this.element && ReactDOM.findDOMNode(this.element)\r\n\r\n        if (!found) {\r\n          // If we previously had a dom node then we need to ensure that\r\n          // we remove any existing listeners to avoid memory leaks.\r\n          if (!first && this.domEl) {\r\n            this.detector.removeAllListeners(this.domEl)\r\n            this.domEl = null\r\n          }\r\n          return\r\n        }\r\n\r\n        if (!first && this.domEl) {\r\n          this.detector.removeAllListeners(this.domEl)\r\n        }\r\n\r\n        this.domEl = found\r\n        this.detector.listenTo(this.domEl, this.checkIfSizeChanged)\r\n      }\r\n\r\n      refCallback = element => {\r\n        this.element = element\r\n      }\r\n\r\n      hasSizeChanged = (current, next) => {\r\n        const c = current\r\n        const n = next\r\n        const cp = c.position || {}\r\n        const np = n.position || {}\r\n\r\n        return (\r\n          (monitorHeight && c.height !== n.height) ||\r\n          (monitorPosition &&\r\n            (cp.top !== np.top ||\r\n              cp.left !== np.left ||\r\n              cp.bottom !== np.bottom ||\r\n              cp.right !== np.right)) ||\r\n          (monitorWidth && c.width !== n.width)\r\n        )\r\n      }\r\n\r\n      checkIfSizeChanged = refreshDelayStrategy(el => {\r\n        const {\r\n          width,\r\n          height,\r\n          right,\r\n          left,\r\n          top,\r\n          bottom,\r\n        } = el.getBoundingClientRect()\r\n\r\n        const next = {\r\n          width: monitorWidth ? width : null,\r\n          height: monitorHeight ? height : null,\r\n          position: monitorPosition ? { right, left, top, bottom } : null,\r\n        }\r\n\r\n        if (this.hasSizeChanged(this.strategisedGetState(), next)) {\r\n          this.strategisedSetState(next)\r\n        }\r\n      }, refreshRate)\r\n\r\n      render() {\r\n        const disablePlaceholder =\r\n          withSize.enableSSRBehaviour ||\r\n          withSize.noPlaceholders ||\r\n          noPlaceholder ||\r\n          this.strategy === 'callback'\r\n\r\n        const size = { ...this.state }\r\n\r\n        return (\r\n          <SizeMeRenderWrapper\r\n            explicitRef={this.refCallback}\r\n            size={this.strategy === 'callback' ? null : size}\r\n            disablePlaceholder={disablePlaceholder}\r\n            {...this.props}\r\n          />\r\n        )\r\n      }\r\n    }\r\n\r\n    SizeAwareComponent.WrappedComponent = WrappedComponent\r\n\r\n    return SizeAwareComponent\r\n  }\r\n}\r\n\r\n/**\r\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\r\n * flag that should be set within the initialisation phase of your application.\r\n *\r\n * Warning: don't set this flag unless you need to as using it may cause\r\n * extra render cycles to happen within your components depending on the logic\r\n * contained within them around the usage of the `size` data.\r\n *\r\n * DEPRECATED: Please use the global disablePlaceholders\r\n */\r\nwithSize.enableSSRBehaviour = false\r\n\r\n/**\r\n * Global configuration allowing to disable placeholder rendering for all\r\n * sizeMe components.\r\n */\r\nwithSize.noPlaceholders = false\r\n\r\nexport default withSize\r\n","import React, { Component } from 'react'\r\nimport isShallowEqual from 'shallowequal'\r\nimport PropTypes from 'prop-types'\r\nimport withSize from './with-size'\r\n\r\nexport default class SizeMe extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.func,\r\n    render: PropTypes.func,\r\n  }\r\n\r\n  static defaultProps = {\r\n    children: undefined,\r\n    render: undefined,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    const { children, render, ...sizeMeConfig } = props\r\n    this.createComponent(sizeMeConfig)\r\n    this.state = {\r\n      size: {\r\n        width: undefined,\r\n        height: undefined,\r\n      },\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const {\r\n      children: prevChildren,\r\n      render: prevRender,\r\n      ...prevSizeMeConfig\r\n    } = this.props\r\n    const {\r\n      children: nextChildren,\r\n      render: nextRender,\r\n      ...nextSizeMeConfig\r\n    } = nextProps\r\n    if (!isShallowEqual(prevSizeMeConfig, nextSizeMeConfig)) {\r\n      this.createComponent(nextSizeMeConfig)\r\n    }\r\n  }\r\n\r\n  createComponent = config => {\r\n    this.SizeAware = withSize(config)(({ children }) => children)\r\n  }\r\n  \r\n  onSize = size => this.setState({ size });\r\n\r\n  render() {\r\n    const { SizeAware } = this\r\n    const render = this.props.children || this.props.render\r\n    return (\r\n      <SizeAware onSize={this.onSize}>\r\n        {render({ size: this.state.size })}\r\n      </SizeAware>\r\n    )\r\n  }\r\n}\r\n","import withSize from './with-size'\r\nimport SizeMe from './component'\r\n\r\nwithSize.SizeMe = SizeMe\r\nwithSize.withSize = withSize\r\n\r\nexport default withSize\r\n"],"names":["resizeDetector","strategy","createResizeDetector","defaultConfig","getDisplayName","WrappedComponent","displayName","name","ReferenceWrapper","Children","only","this","props","children","Component","Placeholder","className","style","phProps","width","height","React","propTypes","PropTypes","element","isRequired","string","object","renderWrapper","SizeMeRenderer","explicitRef","size","disablePlaceholder","restProps","onSize","renderPlaceholder","position","renderProps","toRender","ref","func","shape","number","bool","withSize","config","monitorWidth","monitorHeight","monitorPosition","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","refreshDelayStrategy","throttle","debounce","SizeMeRenderWrapper","SizeAwareComponent","state","undefined","determineStrategy","_this2","callbackState","strategisedSetState","setState","strategisedGetState","refCallback","hasSizeChanged","current","next","c","n","cp","np","top","left","bottom","right","checkIfSizeChanged","el","getBoundingClientRect","detector","handleDOMNode","domEl","uninstall","first","found","ReactDOM","findDOMNode","removeAllListeners","listenTo","enableSSRBehaviour","noPlaceholders","SizeMe","render","sizeMeConfig","createComponent","nextProps","prevSizeMeConfig","nextSizeMeConfig","isShallowEqual","SizeAware","defaultProps"],"mappings":"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"}